# Configuration file for https://circleci.com/gh/angular/flex-layout
# based on the configuration for https://circleci.com/gh/angular/components
# Credit for file goes to Paul Gschwendtner (@DevVersion)

# Note: YAML anchors allow an object to be re-used, reducing duplication.
# The ampersand declares an alias for an object, then later the `<<: *name`
# syntax dereferences it.
# See http://blog.daemonl.com/2016/02/yaml.html
# To validate changes, use an online parser, eg.
# http://yaml-online-parser.appspot.com/

var_1: &docker_image circleci/node:16.10.0
var_2: &docker-browser-image circleci/node:16.10.0-browsers
# **Note**: When updating the beginning of the cache key, also update the cache key to match
# the new cache key prefix. This allows us to take advantage of CircleCI's fallback caching.
# Read more here: https://circleci.com/docs/2.0/caching/#restoring-cache.
var_3: &cache_key v9-ng-layout-{{ checksum "yarn.lock" }}


# Settings common to each job
var_4: &job_defaults
  working_directory: ~/ng
  docker:
    - image: *docker_image

# Restores the cache that could be available for the current Yarn lock file. The cache usually
# includes the node modules and the build cache.
var_5: &restore_cache
  restore_cache:
    key: *cache_key

# Saves the cache for the current Yarn lock file. We store the node modules and the build
# cache in order to make subsequent builds faster.
var_6: &save_cache
  save_cache:
    key: *cache_key
    paths:
      - "node_modules"

# Job step that ensures that the node module dependencies are installed and up-to-date. We use
# Yarn with the frozen lockfile option in order to make sure that lock file and package.json are
# in sync. Unlike in Travis, we don't need to manually purge the node modules if stale because
# CircleCI automatically discards the cache if the checksum of the lock file has changed.
var_7: &yarn_install
  run:
    name: "Installing project dependencies"
    command: yarn install --frozen-lockfile --non-interactive8

# Attaches the release output which has been stored in the workspace to the current job.
# https://circleci.com/docs/2.0/workflows/#using-workspaces-to-share-data-among-jobs
var_8: &attach_release_output
  attach_workspace:
    at: dist/

# Branch filter that we can specify for jobs that should only run on publish branches. This filter
# is used to ensure that not all upstream branches will be published as Github builds
# (e.g. revert branches, feature branches)
var_9: &publish_branches_filter
  branches:
    only:
      - master
      # 6.0.x, 7.1.x, etc.
      - /\d+\.\d+\.x/
      # 6.x, 7.x, 8.x etc
      - /\d+\.x/

# Filter which ensures that jobs only run for pull requests.
var_19: &only_on_pull_requests_filter
  branches:
    only:
      - /pull\/\d+/

# Branch filter that only matches the main branch.
var_21: &only_main_branch_filter
  branches:
    only:
      - master

# -----------------------------
# Container version of CircleCI
# -----------------------------
version: 2.1

# Configures CircleCI orbs for this pipeline. Orbs allow consumption of publicly shared
# CircleCI commands, jobs, configuration elements or executors. Read more about orbs here:
# https://circleci.com/docs/2.0/orb-intro/
orbs:
  # Set up the `queue` orb that allows us to queue up builds across jobs. We use it
  # to make sure that snapshot builds are not deployed out of order, resulting in Git
  # push conflicts.
  queue: eddiewebb/queue@1.5.0


commands:
  checkout_and_rebase:
    description: Checkout and rebase the repository
    steps:
      - checkout
      # After checkout, rebase on top of target branch.
      - run:
          name: Rebase PR on target branch
          environment:
            CIRCLE_GIT_BASE_REVISION: << pipeline.git.base_revision >>
            CIRCLE_GIT_REVISION: << pipeline.git.revision >>
          command: |
            if [ -n "$CIRCLE_PR_NUMBER" ]; then
              # User is required for rebase.
              git config user.name "angular-ci"
              git config user.email "angular-ci"
              node .circleci/rebase-pr.js
            fi

# -----------------------------------------------------------------------------------------
# Job definitions. Jobs which are defined just here, will not run automatically. Each job
# must be part of a workflow definition in order to run for PRs and push builds.
# -----------------------------------------------------------------------------------------
jobs:

  # -----------------------------------
  # Setup job
  # -----------------------------------
  build:
    <<: *job_defaults
    steps:
      - checkout_and_rebase
      - *restore_cache
      - *yarn_install

      # Note: We want to save the cache in this job because the workspace cache also
      # includes the build cache that will be updated in this job.
      - *save_cache

  # ------------------------------------------------------------------------------------------
  # Job that runs the unit tests on locally installed browsers (Chrome and Firefox headless).
  # The available browsers are installed through the angular/ngcontainer Docker image.
  # ------------------------------------------------------------------------------------------
  tests_local_browsers:
    docker:
      - image: *docker-browser-image
    resource_class: xlarge
    steps:
      - checkout_and_rebase
      - *restore_cache
      - *yarn_install

      - run: ./scripts/circleci/run-local-browser-tests.sh

  # ----------------------------------------------------------------------------
  # Job that runs the unit tests on Browserstack. The browsers that will be used
  # to run the unit tests on Browserstack are set in: test/browser-providers.js
  # ----------------------------------------------------------------------------
  tests_browserstack:
    <<: *job_defaults
    environment:
      BROWSER_STACK_USERNAME: "adamplumer1"
      BROWSER_STACK_ACCESS_KEY: "WgLjxoB2zQ3tqmsznKnz"
    steps:
      - checkout_and_rebase
      - *restore_cache
      - *yarn_install

      - run: ./scripts/circleci/run-browserstack-tests.sh

  # ----------------------------------------------------------------------------
  # Job that runs the unit tests on Saucelabs. The browsers that will be used
  # to run the unit tests on Saucelabs are set in: test/browser-providers.js
  # ----------------------------------------------------------------------------
  tests_saucelabs:
    <<: *job_defaults
    environment:
      SAUCE_USERNAME: "angular-flex-layout"
      SAUCE_ACCESS_KEY: "fa20eb1f457c-1f1a-c4c4-41ea-ef9e7f13"
      # Note: This number should not be too high because otherwise we might run into
      # a rate limit exception.
      KARMA_PARALLEL_BROWSERS: 2
    steps:
      - checkout_and_rebase
      - *restore_cache
      - *yarn_install

      - run: ./scripts/circleci/run-saucelabs-tests.sh

  # --------------------------------------------------
  # Job that runs the unit tests on the SSR platform
  # --------------------------------------------------
  tests_ssr:
    <<: *job_defaults
    steps:
      - checkout_and_rebase
      - *restore_cache
      - *yarn_install

      - run: TODO

  # -------------------------------------------------------------------------
  # Job that pre-render's the universal app with `@angular/platform-server`.
  # This verifies that Angular Layout can be rendered within Node.
  # -------------------------------------------------------------------------
  prerender_build:
    <<: *job_defaults
    steps:
      - checkout_and_rebase
      - *restore_cache
      - *yarn_install

      - run: npm run build universal

  # -------------------------------------------------------------------------
  # Job that makes sure Angular Layout can be integrated with a basic app
  # -------------------------------------------------------------------------
  hello_world_build:
    <<: *job_defaults
    steps:
      - checkout_and_rebase
      - *restore_cache
      - *yarn_install

      - run: npm run build hello-world

  # -------------------------------------------------------------------------
  # Job that makes sure Angular Layout can be integrated with the demo app
  # -------------------------------------------------------------------------
  aot_build:
    <<: *job_defaults
    steps:
      - checkout_and_rebase
      - *restore_cache
      - *yarn_install

      - run: npm run build demo-app

  # ----------------------------------
  # Lint job. Runs the gulp lint task.
  # ----------------------------------
  lint:
    <<: *job_defaults
    steps:
      - checkout_and_rebase
      - *restore_cache
      - *yarn_install

      - run: TODO

  # -------------------------------------------------------------------------------------------
  # Job that builds all release packages with Gulp. The built packages can be then used in the
  # same workflow to publish snapshot builds or test the dev-app with the release packages.
  # -------------------------------------------------------------------------------------------
  build_release_packages:
    <<: *job_defaults
    steps:
      - checkout_and_rebase
      - *restore_cache
      - *yarn_install

      - run: npm run build @angular/flex-layout

      # Store the release output in the workspace storage. This means that other jobs
      # in the same workflow can attach the release output to their job.
      - persist_to_workspace:
          root: dist/
          paths:
            - "**/*"

  # ----------------------------------------
  # Job that publishes the build snapshots
  # ----------------------------------------
  publish_snapshots:
    <<: *job_defaults
    steps:
      - checkout_and_rebase
      - *restore_cache
      - *yarn_install
      - *attach_release_output

      # CircleCI has a config setting to enforce SSH for all github connections.
      # This is not compatible with our mechanism of using a Personal Access Token
      # to publish the build snapshots. In order to fix this, we unset the global option.
      - run: git config --global --unset "url.ssh://git@github.com.insteadof"

      - run: ./scripts/circleci/publish-snapshots.sh

# ----------------------------------------------------------------------------------------
# Workflow definitions. A workflow usually groups multiple jobs together. This is useful if
# one job depends on another.
#
# NOTE: When updating this configuration section, make sure to update GitHub robot
#       config to match the new workflow jobs.
# ----------------------------------------------------------------------------------------
workflows:
  version: 2

  # Build and test workflow. A workflow includes multiple jobs that run in parallel. All jobs
  # that build and test source code should be part of this workflow
  build:
    jobs:
      - build

  unit_tests:
    jobs:
      - tests_local_browsers
      - tests_browserstack
      - tests_saucelabs
      - tests_ssr

  integration_tests:
    jobs:
      - prerender_build
      - hello_world_build
      - aot_build

  release_output:
    jobs:
      - build_release_packages
      - publish_snapshots:
          filters: *publish_branches_filter
          requires:
            - build_release_packages

  # Lint workflow. As we want to lint in one job, this is a workflow with just one job.
  lint:
    jobs:
      - lint
